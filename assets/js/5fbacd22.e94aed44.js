"use strict";(self.webpackChunkvex_docs=self.webpackChunkvex_docs||[]).push([[7816],{2595:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"exchange-design/backend-architecture/Order_Management_System","title":"Order Management System","description":"The Order Management System (OMS) is the central brain of the exchange. It handles the complete lifecycle of every order\u2014receiving, validating, risk-checking, routing, and updating positions. The OMS is optimized for sub-millisecond processing at scale.","source":"@site/docs/exchange-design/backend-architecture/05_Order_Management_System.md","sourceDirName":"exchange-design/backend-architecture","slug":"/exchange-design/backend-architecture/Order_Management_System","permalink":"/exchange-design/backend-architecture/Order_Management_System","draft":false,"unlisted":false,"editUrl":"https://github.com/trade-vex/vex-docs/edit/main/docs/exchange-design/backend-architecture/05_Order_Management_System.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"Order_Management_System","title":"Order Management System","sidebar_position":5},"sidebar":"docsSidebar","previous":{"title":"Client Gateway","permalink":"/exchange-design/backend-architecture/Client_Gateway"},"next":{"title":"Order Flow Lifecycle","permalink":"/exchange-design/backend-architecture/Order_Flow_Lifecycle"}}');var i=s(4848),t=s(8453);const a={id:"Order_Management_System",title:"Order Management System",sidebar_position:5},c="Order Management System (OMS)",o={},l=[{value:"Core Responsibilities",id:"core-responsibilities",level:2},{value:"Internal Components",id:"internal-components",level:2}];function d(e){const n={blockquote:"blockquote",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"order-management-system-oms",children:"Order Management System (OMS)"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"Order Management System (OMS)"})," is the central brain of the exchange. It handles the complete lifecycle of every order\u2014receiving, validating, risk-checking, routing, and updating positions. The OMS is optimized for sub-millisecond processing at scale."]}),"\n",(0,i.jsx)(n.p,{children:"Once an order passes through the Customer Gateway, it is forwarded to the OMS, which operates on the same machine as the Client Gateway via Inter-Process Communication (IPC). This co-location minimizes latency and allows the system to scale independently across machines."}),"\n",(0,i.jsx)(n.h2,{id:"core-responsibilities",children:"Core Responsibilities"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Order Validation"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Ensures the order has all required fields (symbol, quantity, side, etc.)"}),"\n",(0,i.jsx)(n.li,{children:"Rejects invalid or unsupported order types"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Risk Checks"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Consults the ",(0,i.jsx)(n.strong,{children:"Risk Engine"})," to validate if the user has sufficient balance and margin"]}),"\n",(0,i.jsxs)(n.li,{children:["Uses the ",(0,i.jsx)(n.strong,{children:"Risk Cache"})," for near-instant lookups"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Position Tracking"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Updates user positions through the ",(0,i.jsx)(n.strong,{children:"Position Keeper"})]}),"\n",(0,i.jsx)(n.li,{children:"Syncs with the balance system asynchronously after order execution"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Order Routing"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Sends validated orders to the appropriate ",(0,i.jsx)(n.strong,{children:"Matching Engine"})]}),"\n",(0,i.jsxs)(n.li,{children:["Uses ",(0,i.jsx)(n.strong,{children:"UDP"})," for ultra-fast delivery"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Response Handling"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Generates internal acknowledgments or rejections"}),"\n",(0,i.jsx)(n.li,{children:"Forwards successful orders to the matching engine and logs the request for recovery"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"internal-components",children:"Internal Components"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Risk Engine"}),": Evaluates the user's available balance and current exposure."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Risk Cache"}),": Holds recent risk state data for low-latency access."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"OrderBook Interface"}),": Coordinates with the engine's order book via the router."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The OMS is also responsible for ensuring that every incoming order goes through a consistent, audit-ready flow before reaching the matching layer. This ensures integrity, consistency, and compliance in trading operations."}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"With performance measured in microseconds, the OMS is built for environments where speed is not just a feature, but a requirement."})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>c});var r=s(6540);const i={},t=r.createContext(i);function a(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);